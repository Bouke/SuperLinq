<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="System.Linq" #>
namespace SuperLinq;

public static partial class SuperEnumerable
{
<#  const int max = 16;
    var overloads =
        from i in Enumerable.Range(1, max)
        let istr = i.ToString(CultureInfo.InvariantCulture)
        select new
        {
            Ts            = string.Join(", ", Enumerable.Repeat("T", i)),
            Count         = i,
            CountElements = istr + " " + (i == 1 ? "element" : "elements"),
            CountArg      = istr,
            FolderArgs    = "folder" + istr + ": folder",

        };

    foreach (var e in overloads) { #>
    /// <summary>
    /// Returns the result of applying a function to a sequence of
    /// <#= e.CountElements #>.
    /// </summary>
    /// <remarks>
    /// This operator uses immediate execution and effectively buffers
    /// as many items of the source sequence as necessary.
    /// </remarks>
    /// <typeparam name="T">Type of element in the source sequence</typeparam>
    /// <typeparam name="TResult">Type of the result</typeparam>
    /// <param name="source">The sequence of items to fold.</param>
    /// <param name="folder">Function to apply to the elements in the sequence.</param>
    /// <returns>The folded value returned by <paramref name="folder"/>.</returns>
    /// <exception cref="ArgumentNullException"><paramref name="source"/> is null</exception>
    /// <exception cref="ArgumentNullException"><paramref name="folder"/> is null</exception>
    /// <exception cref="InvalidOperationException"><paramref name="source"/> does not contain exactly <#= e.CountElements #></exception>

    public static TResult Fold<T, TResult>(this IEnumerable<T> source, Func<<#= e.Ts #>, TResult> folder)
    {
		source.ThrowIfNull();
		folder.ThrowIfNull();

		var elements = source.ToList();
		if (elements.Count != <#= e.CountArg #>)
			throw new InvalidOperationException(
				$"Sequence contained an incorrect number of elements. (Expected: <#= e.CountArg #>, Actual: {elements.Count})");

		return folder(
<#		for (int i = 0; i < e.Count; i++) { #>
			elements[<#= i #>]<#= i == e.Count - 1 ? "" : "," #>
<#		} #>
		);
    }

<#  } #>
}
